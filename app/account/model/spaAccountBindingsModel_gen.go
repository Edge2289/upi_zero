// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	spaAccountBindingsFieldNames          = builder.RawFieldNames(&SpaAccountBindings{})
	spaAccountBindingsRows                = strings.Join(spaAccountBindingsFieldNames, ",")
	spaAccountBindingsRowsExpectAutoSet   = strings.Join(stringx.Remove(spaAccountBindingsFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	spaAccountBindingsRowsWithPlaceHolder = strings.Join(stringx.Remove(spaAccountBindingsFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheSpaAccountBindingsIdPrefix = "cache:spaAccountBindings:id:"
)

type (
	spaAccountBindingsModel interface {
		Insert(ctx context.Context, data *SpaAccountBindings) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SpaAccountBindings, error)
		Update(ctx context.Context, data *SpaAccountBindings) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSpaAccountBindingsModel struct {
		sqlc.CachedConn
		table string
	}

	SpaAccountBindings struct {
		Id         int64        `db:"id"`
		UserId     string       `db:"user_id"`     // users表id
		SubAcctNo  string       `db:"sub_acct_no"` // spa_accounts表sub_acct_no
		OperatorId string       `db:"operator_id"` // 操作人ID 0：系统操作
		CreatedAt  sql.NullTime `db:"created_at"`
		UpdatedAt  sql.NullTime `db:"updated_at"`
	}
)

func newSpaAccountBindingsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSpaAccountBindingsModel {
	return &defaultSpaAccountBindingsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`spa_account_bindings`",
	}
}

func (m *defaultSpaAccountBindingsModel) Delete(ctx context.Context, id int64) error {
	spaAccountBindingsIdKey := fmt.Sprintf("%s%v", cacheSpaAccountBindingsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, spaAccountBindingsIdKey)
	return err
}

func (m *defaultSpaAccountBindingsModel) FindOne(ctx context.Context, id int64) (*SpaAccountBindings, error) {
	spaAccountBindingsIdKey := fmt.Sprintf("%s%v", cacheSpaAccountBindingsIdPrefix, id)
	var resp SpaAccountBindings
	err := m.QueryRowCtx(ctx, &resp, spaAccountBindingsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaAccountBindingsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSpaAccountBindingsModel) Insert(ctx context.Context, data *SpaAccountBindings) (sql.Result, error) {
	spaAccountBindingsIdKey := fmt.Sprintf("%s%v", cacheSpaAccountBindingsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, spaAccountBindingsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.SubAcctNo, data.OperatorId)
	}, spaAccountBindingsIdKey)
	return ret, err
}

func (m *defaultSpaAccountBindingsModel) Update(ctx context.Context, data *SpaAccountBindings) error {
	spaAccountBindingsIdKey := fmt.Sprintf("%s%v", cacheSpaAccountBindingsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, spaAccountBindingsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.SubAcctNo, data.OperatorId, data.Id)
	}, spaAccountBindingsIdKey)
	return err
}

func (m *defaultSpaAccountBindingsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSpaAccountBindingsIdPrefix, primary)
}

func (m *defaultSpaAccountBindingsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaAccountBindingsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSpaAccountBindingsModel) tableName() string {
	return m.table
}
