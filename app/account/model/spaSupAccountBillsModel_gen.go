// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	spaSupAccountBillsFieldNames          = builder.RawFieldNames(&SpaSupAccountBills{})
	spaSupAccountBillsRows                = strings.Join(spaSupAccountBillsFieldNames, ",")
	spaSupAccountBillsRowsExpectAutoSet   = strings.Join(stringx.Remove(spaSupAccountBillsFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	spaSupAccountBillsRowsWithPlaceHolder = strings.Join(stringx.Remove(spaSupAccountBillsFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheSpaSupAccountBillsIdPrefix = "cache:spaSupAccountBills:id:"
)

type (
	spaSupAccountBillsModel interface {
		Insert(ctx context.Context, data *SpaSupAccountBills) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SpaSupAccountBills, error)
		Update(ctx context.Context, data *SpaSupAccountBills) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSpaSupAccountBillsModel struct {
		sqlc.CachedConn
		table string
	}

	SpaSupAccountBills struct {
		Id                int64          `db:"id"`
		TranTime          string         `db:"tran_time"`            // 交易日期 格式：YmdHis
		FundSummaryAcctNo string         `db:"fund_summary_acct_no"` // 汇总账号
		Flag              string         `db:"flag"`                 // 借贷标志 D：借；C：贷
		TranAmt           string         `db:"tran_amt"`             // 交易金额
		BookBal           string         `db:"book_bal"`             // 账面余额
		MemberAcctNo      string         `db:"member_acct_no"`       // 对方账号
		MemberAcctName    string         `db:"member_acct_name"`     // 对方户名
		FrontSeqNo        sql.NullString `db:"front_seq_no"`
		OrderNo           string         `db:"order_no"`     // 订单号
		CnsmrSeqNo        string         `db:"cnsmr_seq_no"` // 交易网流水号
		Describe          string         `db:"describe"`     // 摘要描述
		Remark            string         `db:"remark"`       // 备注
		CreatedAt         sql.NullTime   `db:"created_at"`
		UpdatedAt         sql.NullTime   `db:"updated_at"`
	}
)

func newSpaSupAccountBillsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSpaSupAccountBillsModel {
	return &defaultSpaSupAccountBillsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`spa_sup_account_bills`",
	}
}

func (m *defaultSpaSupAccountBillsModel) Delete(ctx context.Context, id int64) error {
	spaSupAccountBillsIdKey := fmt.Sprintf("%s%v", cacheSpaSupAccountBillsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, spaSupAccountBillsIdKey)
	return err
}

func (m *defaultSpaSupAccountBillsModel) FindOne(ctx context.Context, id int64) (*SpaSupAccountBills, error) {
	spaSupAccountBillsIdKey := fmt.Sprintf("%s%v", cacheSpaSupAccountBillsIdPrefix, id)
	var resp SpaSupAccountBills
	err := m.QueryRowCtx(ctx, &resp, spaSupAccountBillsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaSupAccountBillsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSpaSupAccountBillsModel) Insert(ctx context.Context, data *SpaSupAccountBills) (sql.Result, error) {
	spaSupAccountBillsIdKey := fmt.Sprintf("%s%v", cacheSpaSupAccountBillsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, spaSupAccountBillsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TranTime, data.FundSummaryAcctNo, data.Flag, data.TranAmt, data.BookBal, data.MemberAcctNo, data.MemberAcctName, data.FrontSeqNo, data.OrderNo, data.CnsmrSeqNo, data.Describe, data.Remark)
	}, spaSupAccountBillsIdKey)
	return ret, err
}

func (m *defaultSpaSupAccountBillsModel) Update(ctx context.Context, data *SpaSupAccountBills) error {
	spaSupAccountBillsIdKey := fmt.Sprintf("%s%v", cacheSpaSupAccountBillsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, spaSupAccountBillsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TranTime, data.FundSummaryAcctNo, data.Flag, data.TranAmt, data.BookBal, data.MemberAcctNo, data.MemberAcctName, data.FrontSeqNo, data.OrderNo, data.CnsmrSeqNo, data.Describe, data.Remark, data.Id)
	}, spaSupAccountBillsIdKey)
	return err
}

func (m *defaultSpaSupAccountBillsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSpaSupAccountBillsIdPrefix, primary)
}

func (m *defaultSpaSupAccountBillsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaSupAccountBillsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSpaSupAccountBillsModel) tableName() string {
	return m.table
}
