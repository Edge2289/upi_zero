// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	spaAccountOaEntitiesFieldNames          = builder.RawFieldNames(&SpaAccountOaEntities{})
	spaAccountOaEntitiesRows                = strings.Join(spaAccountOaEntitiesFieldNames, ",")
	spaAccountOaEntitiesRowsExpectAutoSet   = strings.Join(stringx.Remove(spaAccountOaEntitiesFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	spaAccountOaEntitiesRowsWithPlaceHolder = strings.Join(stringx.Remove(spaAccountOaEntitiesFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheSpaAccountOaEntitiesIdPrefix = "cache:spaAccountOaEntities:id:"
)

type (
	spaAccountOaEntitiesModel interface {
		Insert(ctx context.Context, data *SpaAccountOaEntities) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SpaAccountOaEntities, error)
		Update(ctx context.Context, data *SpaAccountOaEntities) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSpaAccountOaEntitiesModel struct {
		sqlc.CachedConn
		table string
	}

	SpaAccountOaEntities struct {
		Id        int64        `db:"id"`
		SubAcctNo string       `db:"sub_acct_no"` // 见证子账户的账号
		EntityId  string       `db:"entity_id"`   // 单位ID
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newSpaAccountOaEntitiesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSpaAccountOaEntitiesModel {
	return &defaultSpaAccountOaEntitiesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`spa_account_oa_entities`",
	}
}

func (m *defaultSpaAccountOaEntitiesModel) Delete(ctx context.Context, id int64) error {
	spaAccountOaEntitiesIdKey := fmt.Sprintf("%s%v", cacheSpaAccountOaEntitiesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, spaAccountOaEntitiesIdKey)
	return err
}

func (m *defaultSpaAccountOaEntitiesModel) FindOne(ctx context.Context, id int64) (*SpaAccountOaEntities, error) {
	spaAccountOaEntitiesIdKey := fmt.Sprintf("%s%v", cacheSpaAccountOaEntitiesIdPrefix, id)
	var resp SpaAccountOaEntities
	err := m.QueryRowCtx(ctx, &resp, spaAccountOaEntitiesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaAccountOaEntitiesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSpaAccountOaEntitiesModel) Insert(ctx context.Context, data *SpaAccountOaEntities) (sql.Result, error) {
	spaAccountOaEntitiesIdKey := fmt.Sprintf("%s%v", cacheSpaAccountOaEntitiesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, spaAccountOaEntitiesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SubAcctNo, data.EntityId)
	}, spaAccountOaEntitiesIdKey)
	return ret, err
}

func (m *defaultSpaAccountOaEntitiesModel) Update(ctx context.Context, data *SpaAccountOaEntities) error {
	spaAccountOaEntitiesIdKey := fmt.Sprintf("%s%v", cacheSpaAccountOaEntitiesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, spaAccountOaEntitiesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SubAcctNo, data.EntityId, data.Id)
	}, spaAccountOaEntitiesIdKey)
	return err
}

func (m *defaultSpaAccountOaEntitiesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSpaAccountOaEntitiesIdPrefix, primary)
}

func (m *defaultSpaAccountOaEntitiesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", spaAccountOaEntitiesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSpaAccountOaEntitiesModel) tableName() string {
	return m.table
}
